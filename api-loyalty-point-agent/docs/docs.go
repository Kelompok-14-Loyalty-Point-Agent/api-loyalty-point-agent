// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/customer/login": {
            "post": {
                "description": "Log in a customer with the given email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Log in a customer",
                "parameters": [
                    {
                        "description": "example value for login; email = admin@example.com, name = admin, password = admin123",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response-string"
                        }
                    },
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response-string"
                        }
                    },
                    "400": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response-string"
                        }
                    },
                    "401": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response-string"
                        }
                    }
                }
            }
        },
        "/customer/register": {
            "post": {
                "description": "Register a new customer with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Register a new customer",
                "parameters": [
                    {
                        "description": "example value for registration; email = admin@example.com, name = admin, password = admin123",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response-response_Customer"
                        }
                    },
                    "201": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response-response_Customer"
                        }
                    },
                    "400": {
                        "description": "failed",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response-string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.Response-response_Customer": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.Customer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.Response-string": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "request.Customer": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "response.Customer": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "API Loyalty Point Agent",
	Description:      "Berikut API Loyalty Point Agent.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
